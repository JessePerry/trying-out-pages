{"name":"Kinect 2 for Windows Demo App","tagline":"The Hands On Labs to complete a sample application for Windows 8.1 and the Kinect 2 for Windows","body":"# Kinect 2 Hands On Labs\r\n\r\n## Lab 1: Initial Kinect2.0 Project Setup\r\nEstimated Time to Complete: 10min\r\n\r\nThis lab is part of a series which takes you through the creation process of a Windows 8.1 Store Application which uses every available feature of the Kinect 2. This is the first lab in the series, and it shows you how to set up the initial development environment to build an app using Kinect 2.\r\n\r\nThis lab will explain the following:\r\n1. How to make a new project for Windows 8.1\r\n2. How to download and reference the Kinect 2.0 SDK.\r\n3. How to get the Kinect 2 sensor in code and build a successful app.\r\n4. How to open the sensor and turn on the Kinect 2 from code.\r\n\r\nThis lab comes with a starting point solution and a completed solution of the covered exercises if required.\r\n\r\n## System Requirements\r\nThe target application is a Windows 8.1 Store application for x86 or x64 machines (not ARM) so a machine with an x86 or x64 architecture is required for development.\r\nSupported Operating Systems and Architectures \r\n* Windows 8.1 \r\n### Software Requirements \r\n* Microsoft Visual Studio® 2013 Community Edition with Update 2 or higher.\r\n* Microsoft .NET Framework 4.5.\r\n* The Kinect 2 SDK (Currently at build 1409)\r\n### Hardware Requirements\r\n* Kinect 2.0 for Windows device.\r\n* USB 3.0\r\n## Project Scenario\r\nFor this lab, you will see how easy it is to set up and use the Kinect for Windows 2.0 SDK in a Windows 8.1 store application. \r\nThe Kinect 2.0 SDK can also be used in a desktop application, by referencing a different library. \r\nWhen setting up the Kinect 2.0 device, please make sure you have correctly used a USB 3.0 port and not a USB 2.0 port. If you are unsure that the Kinect is plugged in properly, you can check a light indicator on the power box of the unit (the box which comes from the single cable in the Kinect 2 and results in power and USB 3.0 connections.\r\nIf the light on the power-box is **Orange** then something is wrong with either the power, Kinect 2, or USB3.0 connection.\r\nIf the light is **White** then the Kinect is correctly registered with windows as a device to be used. The Kinect 2.0 itself does not turn on until it is required by an application.\r\n\r\n# Exercise 1 - Project Setup\r\nThis exercise will show you how to set up the development environment for building a Kinect for Windows 2 application in Windows 8.1, and how to access the **Default Sensor** in code. This lab and all subsequent labs in this series are build using C# and assumes you have a fundamental knowledge of the language.\r\nThe screenshots here are from **Visual Studio Pro 2013 Update 2** but Community Edition is identical.\r\n\r\n1. Open Visual Studio 2013 and create a new project in a directory you can access. \r\nClick File > New > Project and select a Blank App for Windows in C#. Name the project Kinect2Sample. Then click OK to create the project:\r\n**lab01img01**\r\n\r\n2. The project will get created with the default MainPage.xaml and App.xaml added to the project in the Solution Explorer on the right:\r\n**lab01img02**\r\n\r\n3. If you have not downloaded the public Kinect 2 SDK, you should download it and install it before proceeding: [http://www.microsoft.com/en-us/download/details.aspx?id=44561](http://www.microsoft.com/en-us/download/details.aspx?id=44561) ~280MB\r\n\r\n4. Once installed, the Kinect 2 SDK can be referenced for use in the new project. In the Solution Explorer, right click References and click **Add Reference…** to open the Reference Manager.\r\n\r\n5. To add the WindowsPreview.Kinect.dll which uses the .NetCore library (suitable for Windows Store apps), follow these steps:\r\na. Click Extensions on the left.\r\nb. In the center panel, scroll down to the bottom and check WindowsPreview.Kinect.\r\n **lab01img03**\r\nc. Click OK to add the reference.\r\n\r\n6. Kinect 2.0 applications are compatible with x86 and x64 architectures and are not compatible with ARM systems. This dependency from the Kinect 2.0 library means that you must change the project configuration to either x86 or x64 instead of the currently set “Any CPU”. \r\na. Click BUILD then Configuration Manager… to open the Configuration Manager.\r\nb. Click the dropdown box under Active Solution Platform: and select x64.\r\n **lab01img04**\r\nc. Click Close.\r\nd. Now open the project properties by right Clicking the Kinect2Sample project in the solution explorer, then clicking Properties.\r\ne. Click the Build tab on the left, then beside Platform: select x64 from the dropdown.\r\nf. Click FILE, then Save All or hit Ctrl + Shift + S to save all files.\r\n\r\n7. Now you can build and run the application to make sure the references work and are compatible. Click BUILD then Build Solution, then the project will build and present no errors. To Run or Debug the application students can either:\r\na. Click DEBUG then Start Debugging, or\r\nb. In the Debug toolbar, click the Green Arrow Play button next to the target environment which should be set to Local Machine.\r\n   **lab01img05**\r\n\r\nThe application will install on the Local Machine as a Windows 8.1 Store app and launch itself with Visual Studio as the attached debugger. \r\n\r\n8. Upon running or debugging the application, you will see a gray screen, because there is nothing yet in the application to show. Back in Visual Studio, select the menu DEBUG, Stop Debugging or click the Red Stop Square in the Debugging toolbar.\r\n\r\nIn the future, the steps 7 and 8 are required when asked to Build and Run the application.\r\n\r\n9. Open the MainPage.xaml.cs code behind file in Visual Studio by double clicking it.\r\n\r\n10. To get the default sensor for the Kinect, add the WindowsPreview.Kinect namespace, and a private class level variable for the KinectSensor.  Then in the constructor of MainPage class select the default sensor and open it. To do this, add the highlighted code below:\r\n```\r\n// ... other namespaces\r\n**using WindowsPreview.Kinect;**\r\n\r\nnamespace Kinect2Sample\r\n{\r\n    public sealed partial class MainPage : Page\r\n    {\r\n\r\n        **private KinectSensor kinectSensor = null;**\r\n\r\n        public MainPage()\r\n        {\r\n            **// one sensor is currently supported\r\n            this.kinectSensor = KinectSensor.GetDefault();\r\n\r\n            // open the sensor\r\n            this.kinectSensor.Open();**\r\n            \r\n            this.InitializeComponent();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n11. Now add the Capability for the application to use the Kinect as a webcam and microphone device. Open the Package.appxmanifest by double clicking it in the Solution Explorer. Then navigate to the Capabilities tab then tick the Microphone and Webcam capabilities:\r\n \r\n12. Make sure the Kinect 2.0 device is now plugged into both power and a USB3.0 port on the machine.\r\n13. Build and Run the application, and you will be prompted to allow the Kinect:\r\n **lab01img06**\r\nClick Allow.\r\nNOTE: if you click Block by accident, then you can re-enable the microphone and camera through settings for the app in the charms bar.\r\n\r\n14. The same black screen will appear in the application but the infrared depth lights and the white status led of the Kinect 2 will turn on!\r\n**lab01img07**\r\n \r\n15. Stop debugging now. The Kinect 2.0 is ready to be used and this is the end of the first exercise.\r\n\r\n## Summary\r\n\r\nThis lab shows how to initially set up a Windows 8.1 Store application to work with Kinect for Windows 2.0 and so it references the SDK within WindowsPreview which is a Windows 8.1 extension SDK.\r\n\r\nIf you wish to make a Windows 8.1 desktop application (a non-store application) with full access to the .Net Framework, then there is a different Kinect reference they can use. To use the desktop Kinect library reference, follow these steps:\r\nTo add The Microsoft.Kinect.dll which uses the full .NetFramework library, follow these steps in the Reference Manager.\r\n1. Click Browse… to browse to the installed location of the Kinect library.\r\n2. Navigate to the following path: C:\\Program Files\\Microsoft SDKs\\Kinect\\v2.0_1409\\Assemblies\r\n3. Highlight the Microsoft.Kinect.dll library there and Click Add.\r\nThe Microsoft.Kinect.dll will be added in the reference manager already checked, so Click OK.\r\n **lab01img08**\r\n\r\nCurrently the Kinect is simply turning on in the application, and with this confirmation you know that the application is activating the Kinect.\r\nThere is a code-base available which is the completed solution from the work in this lab. The next lab will begin from this code.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}